name: Test, Build Package, and Generate Documentation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Test Package
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: macOS Configure compiler for isosplit6 build
      if: runner.os == 'macOS'
      run: |
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV
        echo "CXXFLAGS=-std=c++14 -I$(xcrun --show-sdk-path)/usr/include/c++/v1" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(xcrun --show-sdk-path)/usr/lib" >> $GITHUB_ENV
        
    - name: Install package and dependencies
      run: |
        uv sync --all-groups
        echo "Python version: $(uv run python --version)"
        echo "Installed packages:"
        uv pip list

    - name: macOS install isosplit6 and mountainsort5
      if: runner.os == 'macOS'
      run: |
        uv pip install --reinstall --no-binary :all: isosplit6
        uv pip install --reinstall mountainsort5
        
    - name: Test package import
      run: |
        uv run python -c "import neurodent; print('Package imports successfully')"
        
    - name: Run tests with coverage
      run: |
        uv run pytest tests/ --cov=neurodent --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        flags: tests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: true
        verbose: true

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    # needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v6
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.8'
        
    - name: Build package
      run: |
        uv build
        echo "Package built successfully!"
        echo "Distribution files:"
        ls -la dist/
        echo "Package contents (wheel):"
        unzip -l dist/*.whl | head -20
        echo "Package contents (tar.gz):"
        tar -tzf dist/*.tar.gz | head -20
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 30

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    # needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.8'
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Install documentation dependencies
      run: |
        uv pip install mkdocs mkdocstrings[python] mkdocs-material
        
    - name: Build documentation
      run: |
        echo "Building documentation..."
        uv run mkdocs build --verbose
        echo "Documentation built successfully!"
        echo "Site directory contents:"
        ls -la site/
        echo "Site size:"
        du -sh site/
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: site/
        retention-days: 30

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    # needs: [test, build-docs]
    needs: build-docs
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.8'
        
    - name: Create virtual environment
      run: uv venv
        
    - name: Install documentation dependencies
      run: |
        uv pip install mkdocs mkdocstrings[python] mkdocs-material
        
    - name: Build documentation
      run: uv run mkdocs build
      
    - name: Deploy to GitHub Pages
      run: uv run mkdocs gh-deploy --force 
